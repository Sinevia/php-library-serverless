<?php

namespace Sinevia;

class SessionHandler implements \SessionHandlerInterface {

    public function close() {
        return true;
    }

    public function destroy($sessionId) {
        $session = db()
                ->table('session')
                ->where('Id', '=', $sessionId)
                ->delete();
        return true;
    }

    public function gc($maximumLifetime) {
        $expireDate = date('Y-m-d H:i:s', (time() - intval($maximumLifetime)));
        db()->table('session')
                ->where('UpdatedAt', '<', $expireDate)
                ->delete();
        return true;
    }

    /**
     * Opens the session
     * @param string $sessionSavePath
     * @param string $sessionName
     * @return boolean
     */
    public function open($sessionSavePath, $sessionName) {
        //delete old session handlers
        $expireDate = date('Y-m-d H:i:s', (time() - (3600 * 24)));
        db()->table('session')
                ->where('CreatedAt', '<', $expireDate)
                ->delete();
        return true;
    }

    public function read($sessionId) {
        // DEBUG: db()->debug = true;
        $session = db()->table('session')
                ->where('Id', '=', $sessionId)
                ->selectOne();
        $data = (string) $session['Data'] ?? '';
        return $data;
    }

    public function write($sessionId, $sessionData) {
        // DEBUG: db()->debug = true;
        $session = db()
                ->table('session')
                ->where('Id', '=', $sessionId)
                ->selectOne();
        if (is_null($session)) {
            $session = [];
            $session['Id'] = $sessionId;
            $session['CreatedAt'] = date('Y-m-d H:i:s');
            db()->table('session')->insert($session);
        }
        $session['UpdatedAt'] = date('Y-m-d H:i:s');
        $session['Data'] = $sessionData;
        db()->table('session')->where('Id', '=', $sessionId)->update($session);
        return true;
    }

    public function create_sid() {
        // available since PHP 5.5.1
        // invoked internally when a new session id is needed
        // no parameter is needed and return value should be the new session id created
        // ...
    }

    public function validateId($sessionId) {
        // implements SessionUpdateTimestampHandlerInterface::validateId()
        // available since PHP 7.0
        // return value should be true if the session id is valid otherwise false
        // if false is returned a new session id will be generated by php internally
        // ...
    }

    public function updateTimestamp($sessionId, $sessionData) {
        return true;
    }

}
